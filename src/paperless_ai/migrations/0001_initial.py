# Generated by Django 5.2.5 on 2025-08-22 00:39

import django.core.validators
import django.db.models.deletion
import paperless_ai.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('documents', '1068_alter_document_created'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nom descriptif unique du modèle', max_length=100, unique=True, verbose_name='Nom du modèle')),
                ('model_type', models.CharField(choices=[('classification', 'Classification de documents'), ('correspondent', 'Prédiction de correspondant'), ('tagging', 'Suggestion de tags'), ('embedding', "Génération d'embeddings"), ('search', 'Recherche sémantique')], max_length=20, verbose_name='Type de modèle')),
                ('language', models.CharField(default='multilingual', help_text='Langue principale du modèle', max_length=20, verbose_name='Langue')),
                ('model_path', models.CharField(help_text='Chemin vers les fichiers du modèle entraîné', max_length=500, verbose_name='Chemin du modèle')),
                ('config', models.JSONField(default=paperless_ai.models.default_model_config, help_text='Paramètres de configuration du modèle', verbose_name='Configuration')),
                ('status', models.CharField(choices=[('training', 'En formation'), ('ready', 'Prêt'), ('updating', 'Mise à jour'), ('error', 'Erreur'), ('disabled', 'Désactivé')], default='training', max_length=20, verbose_name='Statut')),
                ('version', models.CharField(default='1.0.0', max_length=20, verbose_name='Version')),
                ('accuracy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Précision')),
                ('f1_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Score F1')),
                ('training_samples', models.IntegerField(default=0, verbose_name="Échantillons d'entraînement")),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('last_trained', models.DateTimeField(blank=True, null=True, verbose_name='Dernier entraînement')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_models', to=settings.AUTH_USER_MODEL, verbose_name='Propriétaire')),
            ],
            options={
                'verbose_name': 'Modèle IA',
                'verbose_name_plural': 'Modèles IA',
                'ordering': ['-updated'],
            },
        ),
        migrations.CreateModel(
            name='TrainingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('training_config', models.JSONField(default=paperless_ai.models.default_empty_dict, verbose_name="Configuration d'entraînement")),
                ('dataset_info', models.JSONField(default=paperless_ai.models.default_empty_dict, verbose_name='Informations sur le dataset')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('running', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échec'), ('cancelled', 'Annulé')], default='pending', max_length=20, verbose_name='Statut')),
                ('progress', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Progression (%)')),
                ('final_metrics', models.JSONField(default=paperless_ai.models.default_empty_dict, verbose_name='Métriques finales')),
                ('error_message', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Démarré le')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminé le')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to='paperless_ai.aimodel', verbose_name='Modèle')),
                ('started_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='training_jobs', to=settings.AUTH_USER_MODEL, verbose_name='Démarré par')),
            ],
            options={
                'verbose_name': "Tâche d'entraînement",
                'verbose_name_plural': "Tâches d'entraînement",
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='AIMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('classification_accuracy', 'Précision classification'), ('search_relevance', 'Pertinence recherche'), ('user_satisfaction', 'Satisfaction utilisateur'), ('processing_speed', 'Vitesse de traitement'), ('model_confidence', 'Confiance du modèle')], max_length=30, verbose_name='Type de métrique')),
                ('value', models.FloatField(verbose_name='Valeur')),
                ('target_value', models.FloatField(blank=True, null=True, verbose_name='Valeur cible')),
                ('period_start', models.DateTimeField(verbose_name='Début de période')),
                ('period_end', models.DateTimeField(verbose_name='Fin de période')),
                ('sample_size', models.IntegerField(default=0, verbose_name="Taille de l'échantillon")),
                ('metadata', models.JSONField(default=paperless_ai.models.default_empty_dict, verbose_name='Métadonnées additionnelles')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='paperless_ai.aimodel', verbose_name='Modèle')),
            ],
            options={
                'verbose_name': 'Métrique IA',
                'verbose_name_plural': 'Métriques IA',
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['model', 'metric_type'], name='paperless_a_model_i_9674fc_idx'), models.Index(fields=['period_start', 'period_end'], name='paperless_a_period__d03295_idx')],
            },
        ),
        migrations.CreateModel(
            name='DocumentClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classification_type', models.CharField(choices=[('document_type', 'Type de document'), ('correspondent', 'Correspondant'), ('tag', 'Tag'), ('category', 'Catégorie')], max_length=20, verbose_name='Type de classification')),
                ('predicted_class', models.CharField(max_length=255, verbose_name='Classe prédite')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Score de confiance')),
                ('is_validated', models.BooleanField(default=False, verbose_name="Validé par l'utilisateur")),
                ('is_applied', models.BooleanField(default=False, verbose_name='Appliqué au document')),
                ('validation_feedback', models.CharField(blank=True, choices=[('correct', 'Correct'), ('incorrect', 'Incorrect'), ('partial', 'Partiellement correct')], max_length=20, null=True, verbose_name='Feedback de validation')),
                ('processing_time', models.FloatField(blank=True, null=True, verbose_name='Temps de traitement (secondes)')),
                ('features_used', models.JSONField(default=paperless_ai.models.default_empty_list, verbose_name='Caractéristiques utilisées')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('validated_at', models.DateTimeField(blank=True, null=True, verbose_name='Validé le')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_classifications', to='documents.document', verbose_name='Document')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classifications', to='paperless_ai.aimodel', verbose_name='Modèle utilisé')),
                ('predicted_correspondent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='documents.correspondent', verbose_name='Correspondant prédit')),
                ('predicted_document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='documents.documenttype', verbose_name='Type de document prédit')),
                ('predicted_tags', models.ManyToManyField(blank=True, to='documents.tag', verbose_name='Tags prédits')),
                ('validated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validated_classifications', to=settings.AUTH_USER_MODEL, verbose_name='Validé par')),
            ],
            options={
                'verbose_name': 'Classification de document',
                'verbose_name_plural': 'Classifications de documents',
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['document', 'classification_type'], name='paperless_a_documen_03b1ee_idx'), models.Index(fields=['model', 'confidence_score'], name='paperless_a_model_i_6cbc6f_idx'), models.Index(fields=['is_validated', 'is_applied'], name='paperless_a_is_vali_c8c20b_idx')],
            },
        ),
        migrations.CreateModel(
            name='DocumentEmbedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('embedding_vector', models.JSONField(help_text='Représentation vectorielle du document', verbose_name="Vecteur d'embedding")),
                ('vector_dimension', models.IntegerField(verbose_name='Dimension du vecteur')),
                ('text_length', models.IntegerField(verbose_name='Longueur du texte traité')),
                ('extraction_method', models.CharField(default='full_text', help_text='Méthode utilisée pour extraire le texte', max_length=50, verbose_name="Méthode d'extraction")),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding', to='documents.document', verbose_name='Document')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_embeddings', to='paperless_ai.aimodel', verbose_name='Modèle utilisé')),
            ],
            options={
                'verbose_name': 'Embedding de document',
                'verbose_name_plural': 'Embeddings de documents',
                'indexes': [models.Index(fields=['model', 'vector_dimension'], name='paperless_a_model_i_1a2070_idx'), models.Index(fields=['created'], name='paperless_a_created_5e2b5e_idx')],
                'unique_together': {('document', 'model')},
            },
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('query_text', models.TextField(verbose_name='Texte de la requête')),
                ('query_type', models.CharField(choices=[('text', 'Recherche textuelle'), ('semantic', 'Recherche sémantique'), ('hybrid', 'Recherche hybride'), ('conversational', 'Recherche conversationnelle')], max_length=20, verbose_name='Type de requête')),
                ('query_embedding', models.JSONField(blank=True, null=True, verbose_name='Embedding de la requête')),
                ('results_count', models.IntegerField(default=0, verbose_name='Nombre de résultats')),
                ('response_time', models.FloatField(verbose_name='Temps de réponse (secondes)')),
                ('clicked_results', models.JSONField(default=paperless_ai.models.default_empty_list, verbose_name='Résultats cliqués')),
                ('filters_applied', models.JSONField(default=paperless_ai.models.default_empty_dict, verbose_name='Filtres appliqués')),
                ('session_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID de session')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_queries', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Requête de recherche',
                'verbose_name_plural': 'Requêtes de recherche',
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['user', 'created'], name='paperless_a_user_id_1374e2_idx'), models.Index(fields=['query_type'], name='paperless_a_query_t_c71486_idx'), models.Index(fields=['response_time'], name='paperless_a_respons_99b931_idx')],
            },
        ),
    ]
