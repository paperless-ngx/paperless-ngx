"""
Commande de gestion pour le module OCR hybride Paperless-ngx

Usage:
    python manage.py ocr_process --help
    python manage.py ocr_process --document-id 123 --engine tesseract
    python manage.py ocr_process --reprocess-all --engine hybrid
    python manage.py ocr_process --stats
"""

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from documents.models import Document
from paperless_ocr.models import OCRConfiguration, OCRResult, OCRQueue
from paperless_ocr.engines import TesseractEngine, OCRConfig
from paperless_ocr.tasks import process_document_ocr
from paperless_ocr.config import get_default_ocr_config
import os


class Command(BaseCommand):
    help = 'Commandes de gestion pour le syst√®me OCR hybride'

    def add_arguments(self, parser):
        parser.add_argument(
            '--document-id',
            type=int,
            help='ID du document √† traiter'
        )

        parser.add_argument(
            '--engine',
            choices=['tesseract', 'doctr', 'hybrid'],
            default='hybrid',
            help='Moteur OCR √† utiliser (d√©faut: hybrid)'
        )

        parser.add_argument(
            '--reprocess-all',
            action='store_true',
            help='Retraiter tous les documents'
        )

        parser.add_argument(
            '--failed-only',
            action='store_true',
            help='Retraiter seulement les documents en √©chec'
        )

        parser.add_argument(
            '--stats',
            action='store_true',
            help='Afficher les statistiques OCR'
        )

        parser.add_argument(
            '--cleanup',
            action='store_true',
            help='Nettoyer les anciens r√©sultats OCR'
        )

        parser.add_argument(
            '--setup',
            action='store_true',
            help='Configurer le module OCR avec des param√®tres par d√©faut'
        )

        parser.add_argument(
            '--test',
            action='store_true',
            help='Tester le fonctionnement du module OCR'
        )

        parser.add_argument(
            '--async',
            action='store_true',
            help='Traitement asynchrone avec Celery'
        )

        parser.add_argument(
            '--priority',
            choices=['low', 'normal', 'high'],
            default='normal',
            help='Priorit√© du traitement (d√©faut: normal)'
        )

    def handle(self, *args, **options):
        # Configuration de l'environnement pour √©viter les probl√®mes d'affichage
        os.environ.setdefault('DISPLAY', '')
        os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')

        if options['stats']:
            self.show_stats()
        elif options['setup']:
            self.setup_ocr()
        elif options['test']:
            self.test_ocr()
        elif options['cleanup']:
            self.cleanup_ocr()
        elif options['reprocess_all']:
            self.reprocess_all(options)
        elif options['failed_only']:
            self.reprocess_failed(options)
        elif options['document_id']:
            self.process_document(options)
        else:
            self.stdout.write(
                self.style.ERROR('Aucune action sp√©cifi√©e. Utilisez --help pour voir les options.')
            )

    def show_stats(self):
        """Affiche les statistiques OCR"""
        self.stdout.write(self.style.SUCCESS('üìä Statistiques OCR'))
        self.stdout.write('=' * 50)

        # Configurations
        configs = OCRConfiguration.objects.count()
        active_configs = OCRConfiguration.objects.filter(is_active=True).count()

        self.stdout.write(f'Configurations: {configs} (actives: {active_configs})')

        # R√©sultats
        total_results = OCRResult.objects.count()
        completed = OCRResult.objects.filter(status='completed').count()
        failed = OCRResult.objects.filter(status='failed').count()
        pending = OCRResult.objects.filter(status='pending').count()

        self.stdout.write(f'R√©sultats: {total_results}')
        self.stdout.write(f'  - Termin√©s: {completed}')
        self.stdout.write(f'  - √âchecs: {failed}')
        self.stdout.write(f'  - En attente: {pending}')

        # File d'attente
        queue_count = OCRQueue.objects.count()
        queue_pending = OCRQueue.objects.filter(status='pending').count()

        self.stdout.write(f'File d\'attente: {queue_count} (en attente: {queue_pending})')

        # Statistiques par moteur
        if completed > 0:
            self.stdout.write('\nPar moteur:')
            engines = OCRResult.objects.filter(status='completed').values_list('engine', flat=True).distinct()

            for engine in engines:
                results = OCRResult.objects.filter(engine=engine, status='completed')
                count = results.count()

                from django.db.models import Avg
                avg_confidence = results.aggregate(avg=Avg('confidence'))['avg'] or 0
                avg_time = results.aggregate(avg=Avg('processing_time'))['avg'] or 0

                self.stdout.write(f'  {engine}: {count} docs, conf={avg_confidence:.1%}, temps={avg_time:.1f}s')

    def setup_ocr(self):
        """Configure le module OCR avec des param√®tres par d√©faut"""
        self.stdout.write(self.style.SUCCESS('üîß Configuration du module OCR'))

        # Configuration par d√©faut
        config, created = OCRConfiguration.objects.get_or_create(
            name="Configuration Par D√©faut",
            defaults={
                'tesseract_lang': 'fra+eng',
                'tesseract_psm': 6,
                'tesseract_oem': 3,
                'doctr_model': 'db_resnet50',
                'dpi': 300,
                'enhance_image': True,
                'denoise': True,
                'is_active': True,
            }
        )

        if created:
            self.stdout.write(self.style.SUCCESS('‚úÖ Configuration cr√©√©e'))
        else:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  Configuration existante'))

        self.stdout.write(f'ID de configuration: {config.id}')

    def test_ocr(self):
        """Teste le fonctionnement du module OCR"""
        self.stdout.write(self.style.SUCCESS('üß™ Test du module OCR'))

        try:
            # Test de la configuration
            config = get_default_ocr_config()
            self.stdout.write('‚úÖ Configuration charg√©e')

            # Test Tesseract
            try:
                engine = TesseractEngine(config)
                self.stdout.write('‚úÖ Moteur Tesseract disponible')
            except ImportError:
                self.stdout.write(self.style.ERROR('‚ùå Tesseract non disponible'))

            # Test OpenCV
            try:
                import cv2
                self.stdout.write(f'‚úÖ OpenCV disponible (v{cv2.__version__})')
            except ImportError:
                self.stdout.write(self.style.ERROR('‚ùå OpenCV non disponible'))

            # Test des mod√®les
            configs = OCRConfiguration.objects.count()
            self.stdout.write(f'‚úÖ Base de donn√©es accessible ({configs} configs)')

            self.stdout.write(self.style.SUCCESS('üéâ Module OCR fonctionnel'))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur de test: {e}'))

    def cleanup_ocr(self):
        """Nettoie les anciens r√©sultats OCR"""
        self.stdout.write(self.style.WARNING('üßπ Nettoyage des r√©sultats OCR'))

        with transaction.atomic():
            # Suppression des r√©sultats en √©chec anciens
            old_failed = OCRResult.objects.filter(
                status='failed',
                created__lt='2024-01-01'  # Plus anciens que 2024
            )
            count_failed = old_failed.count()
            old_failed.delete()

            # Suppression des √©l√©ments de queue termin√©s
            old_queue = OCRQueue.objects.filter(
                status__in=['completed', 'failed'],
                created__lt='2024-01-01'
            )
            count_queue = old_queue.count()
            old_queue.delete()

            self.stdout.write(f'‚úÖ Nettoy√©: {count_failed} r√©sultats, {count_queue} t√¢ches')

    def process_document(self, options):
        """Traite un document sp√©cifique"""
        document_id = options['document_id']
        engine = options['engine']
        use_async = options['async']
        priority = options['priority']

        try:
            document = Document.objects.get(id=document_id)
            self.stdout.write(f'üìÑ Traitement de: {document.title}')

            if use_async:
                # Traitement asynchrone
                task = process_document_ocr.delay(
                    document_id=document_id,
                    engine_name=engine,
                    priority=priority
                )
                self.stdout.write(f'üöÄ T√¢che asynchrone lanc√©e: {task.id}')
            else:
                # Traitement synchrone
                from paperless_ocr.engines import TesseractEngine

                config = get_default_ocr_config()
                engine_obj = TesseractEngine(config)

                self.stdout.write(f'‚ö° Traitement synchrone avec {engine}...')
                result = engine_obj.process(document)

                self.stdout.write(self.style.SUCCESS('‚úÖ Traitement termin√©'))
                self.stdout.write(f'   Confiance: {result.confidence:.2%}')
                self.stdout.write(f'   Temps: {result.processing_time:.2f}s')

        except Document.DoesNotExist:
            raise CommandError(f'Document {document_id} non trouv√©')
        except Exception as e:
            raise CommandError(f'Erreur de traitement: {e}')

    def reprocess_all(self, options):
        """Retraite tous les documents"""
        engine = options['engine']
        use_async = options['async']
        priority = options['priority']

        documents = Document.objects.all()
        count = documents.count()

        self.stdout.write(f'üîÑ Retraitement de {count} documents avec {engine}')

        if not input('Continuer? (y/N): ').lower().startswith('y'):
            self.stdout.write('Annul√©')
            return

        for i, document in enumerate(documents, 1):
            self.stdout.write(f'[{i}/{count}] {document.title}')

            try:
                if use_async:
                    process_document_ocr.delay(
                        document_id=document.id,
                        engine_name=engine,
                        priority=priority
                    )
                else:
                    # Version synchrone simplifi√©e
                    self.stdout.write(f'  Traitement synchrone non impl√©ment√© pour le retraitement en lot')

            except Exception as e:
                self.stdout.write(self.style.ERROR(f'  Erreur: {e}'))

    def reprocess_failed(self, options):
        """Retraite les documents en √©chec"""
        failed_results = OCRResult.objects.filter(status='failed')
        count = failed_results.count()

        self.stdout.write(f'üîÑ Retraitement de {count} documents en √©chec')

        for result in failed_results:
            self.stdout.write(f'üìÑ {result.document.title}')

            try:
                process_document_ocr.delay(
                    document_id=result.document.id,
                    engine_name=options['engine'],
                    priority=options['priority']
                )
                self.stdout.write('  ‚úÖ Relanc√©')

            except Exception as e:
                self.stdout.write(self.style.ERROR(f'  ‚ùå Erreur: {e}'))
